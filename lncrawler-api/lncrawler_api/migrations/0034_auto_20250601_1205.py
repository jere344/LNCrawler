# Generated by Django 5.2.1 on 2025-06-01 10:05

from django.db import migrations, models
import django.db.models.deletion


def migrate_source_names_to_external_sources(apps, schema_editor):
    """
    Migrate existing source_name data to ExternalSource model
    """
    NovelFromSource = apps.get_model('lncrawler_api', 'NovelFromSource')
    ExternalSource = apps.get_model('lncrawler_api', 'ExternalSource')
    
    # Get all unique source names from existing NovelFromSource records
    source_names = NovelFromSource.objects.values_list('source_name', flat=True).distinct()
    
    # Create ExternalSource instances for each unique source name
    external_sources = {}
    for source_name in source_names:
        if source_name:  # Skip empty/null source names
            external_source, created = ExternalSource.objects.get_or_create(
                source_name=source_name,
                defaults={'status': 'alive'}
            )
            external_sources[source_name] = external_source
    
    # Update all NovelFromSource records to use the new external_source foreign key
    for novel_source in NovelFromSource.objects.all():
        if novel_source.source_name in external_sources:
            novel_source.external_source = external_sources[novel_source.source_name]
            novel_source.save(update_fields=['external_source'])


def reverse_migrate_external_sources_to_source_names(apps, schema_editor):
    """
    Reverse migration: copy external_source.source_name back to source_name field
    """
    NovelFromSource = apps.get_model('lncrawler_api', 'NovelFromSource')
    
    for novel_source in NovelFromSource.objects.all():
        if novel_source.external_source:
            novel_source.source_name = novel_source.external_source.source_name
            novel_source.save(update_fields=['source_name'])


class Migration(migrations.Migration):

    dependencies = [
        ("lncrawler_api", "0033_alter_novelfromsource_novelupdates_url"),
    ]

    operations = [
        # Step 1: Create ExternalSource model
        migrations.CreateModel(
            name='ExternalSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_name', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead')], default='alive', max_length=10)),
            ],
            options={
                'ordering': ['source_name'],
            },
        ),
        
        # Step 2: Add external_source field (nullable initially)
        migrations.AddField(
            model_name='novelfromsource',
            name='external_source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='novels', to='lncrawler_api.externalsource'),
        ),
        
        # Step 3: Populate ExternalSource and update foreign keys
        migrations.RunPython(
            migrate_source_names_to_external_sources,
            reverse_migrate_external_sources_to_source_names
        ),
        
        # Step 4: Make external_source field non-nullable
        migrations.AlterField(
            model_name='novelfromsource',
            name='external_source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='novels', to='lncrawler_api.externalsource'),
        ),
        
        # Step 5: Remove the old source_name field
        migrations.RemoveField(
            model_name='novelfromsource',
            name='source_name',
        ),
    ]
